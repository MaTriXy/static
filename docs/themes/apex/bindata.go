// Code generated by go-bindata.
// sources:
// files/css/index.css
// files/js/index.js
// files/views/index.html
// DO NOT EDIT!

package apex

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssIndexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x5b\x6f\xdb\xbe\x15\x7f\xf7\xa7\x38\x70\xf0\x07\x92\xcd\x12\x24\x27\x4e\x5d\x05\x08\xd6\xb5\x09\xba\x87\x6e\xc5\xb2\x62\x7b\xa5\xa4\x63\x8b\x0b\x45\x0a\x24\x95\xd8\x1d\xf2\xdd\x07\xde\x64\xca\x96\x53\x14\x79\x88\x44\x9e\xeb\xef\x5c\xe5\x42\x0a\xa1\xe1\x7f\x33\x80\x24\x41\xa2\xb0\x80\xaa\x2f\x69\x95\x94\xf8\x93\xa2\xbc\x4c\xd7\xcb\x05\x64\x0b\x48\xf3\xe5\x02\xf2\xab\x3b\x4b\xf7\x4a\x6b\xdd\x14\xb0\xce\xb2\x6e\xe7\x4e\x1a\x24\x35\xca\xa4\x41\xba\x6d\x74\x01\x37\xee\xc6\x5e\x69\x49\xaa\x67\xca\xb7\x05\x64\x69\xb6\x92\xd8\xde\x8d\x8e\x93\x16\x6b\xda\xb7\xe6\x76\xe2\x92\x11\xb9\x45\x73\xb7\xb6\x77\xf6\xb2\x26\xf2\xb9\x80\x8b\x2c\xcb\x1c\x71\xc9\x7a\x2c\xe0\xe2\xfa\xfa\xd3\xc7\xc7\x47\x77\xc4\x8c\x19\xc9\x56\x92\x7d\x01\x17\x1b\x62\xfe\x3c\x73\xb9\x35\x27\x9b\x8d\xa3\xdb\x98\xb7\xf5\xed\xfa\xe1\xe3\x6d\x38\x08\xe2\x97\xf9\x72\xb5\xfc\xe8\xb9\x14\x32\xac\x34\x15\xdc\xf2\xbf\x10\x79\xe9\xd4\x7a\x3c\x0e\xd7\x46\xe0\x6b\x43\x35\xde\xcd\xde\x66\xb3\x3f\x59\x5c\x4b\xb1\x4b\x14\xfd\x69\x21\x28\x85\x34\x38\x95\x62\x67\x09\x1a\xdd\xb2\x05\x94\xa2\xde\x5b\xca\x8d\xe0\x3a\xd9\x90\x96\xb2\x7d\x01\x09\xe9\x3a\x86\x89\xda\x2b\x8d\xed\x02\xfe\xca\x28\x7f\xfe\x46\xaa\x27\xfb\xfe\x28\xb8\x5e\xcc\x00\x00\xe6\x4f\xb8\x15\x08\x3f\xfe\x36\x5f\xc0\xfc\x9f\xa2\x14\x5a\x98\xa7\x7f\xec\xf6\x5b\xe4\x73\x4f\xf3\xa3\xec\xb9\xee\xcd\xf9\x67\xc2\x35\x91\xc8\x98\x79\x79\xa4\x92\xc0\x13\xe1\x2a\xd0\x7d\x91\x82\xd6\xfe\x04\xe6\x5f\x91\xbd\xa0\xa6\x15\x81\xbf\x63\x8f\xf3\x05\x28\xc2\x55\xa2\x50\x52\x07\xdf\x2b\x96\xcf\x54\x27\xd6\x6a\xd5\x0a\xa1\x1b\xeb\x23\xe1\x9a\x12\x46\x89\xc2\xfa\x2e\x38\xa5\xe8\x4f\x2c\x20\xbf\x75\xf9\x62\x8f\x5e\x7d\xae\x5c\xbb\x38\x96\xa4\x7a\xde\x4a\xd1\xf3\x7a\x00\x78\x6b\xe1\xad\x04\x13\x32\x9c\xf9\xf8\xd8\x0b\x46\x39\x0e\x19\x97\x9b\x93\x96\xc8\x2d\xe5\x05\x58\x81\x1d\xa9\x6b\x97\x76\x16\xea\xa2\x18\xa2\xe4\xa2\x72\xa2\x2f\x0e\xf2\xa9\xe6\x38\xc6\x57\x2e\x78\xf9\x02\x9a\xe5\x02\x9a\xeb\x05\x34\x37\x56\xa8\x33\x20\xd1\xa2\x2b\xe0\xc3\xca\x39\xeb\xcf\x4a\xa1\xb5\x68\xbd\x6d\x31\x26\xe9\xd2\xa7\xfd\x08\x95\x5b\x87\xca\xd8\xc7\xa1\x42\xce\x60\x62\x8d\x3a\x31\xe4\x54\xa3\x13\xe3\xa8\xff\x0c\xdd\x21\xf7\xc6\x04\x27\xea\x6f\x2d\x13\xb1\xf4\xde\x04\xca\x1b\x94\x54\x1b\x62\x8d\x3b\x9d\xd4\x58\x09\x49\x0c\x4e\x05\x70\xc1\x5d\x1d\x74\x91\x4d\x05\x2c\x57\xdd\x0e\xa6\xbc\xbb\x9d\x72\xcd\xbe\xbb\x82\x76\x1e\x32\x0a\x4a\x4b\xc1\xb7\x8b\x59\xe7\x9f\x62\x83\x4e\xf3\x64\x84\xeb\x2a\xcb\x82\x14\x62\x04\x90\xdf\xe0\xbd\xc9\xe2\xc4\x1a\x22\x7a\xed\xe2\x3c\x94\xb6\x3b\xcd\xbb\x1d\xd4\x42\x6b\xac\xe1\xa2\xae\xeb\x41\x69\xd1\x88\x17\x94\x56\xb5\x7b\x3c\x35\x60\xe8\x2c\x47\x22\x23\x3c\x63\xde\x11\x55\x32\x92\x64\x5f\x1c\x6c\x3d\x1b\x05\x61\x95\x99\x20\xb8\x7f\xd7\xbe\x8d\x1f\x55\x4c\xcf\xe0\x88\x29\x77\x4c\xf9\x81\xc9\x91\x31\x3a\x96\x1d\xe2\xfb\x7e\x2c\x4f\xb3\xdb\x67\xa5\x93\xf8\x4e\x68\x83\x5b\x67\x62\xdb\x49\x3c\x53\xe2\x87\xb9\x70\x5a\xe0\x43\xcc\x07\x18\x02\x2e\x1e\x60\x49\x6a\xda\xab\x02\x96\xee\xd4\xe0\xbf\x61\xe2\x35\xd9\x15\xa0\x2a\x29\x18\x0b\x06\x15\x30\x7f\x12\xbd\xac\x10\x3e\x8b\x1a\xe1\xbb\x34\x1d\xf9\x1b\x72\x26\x16\xd0\x0a\x2e\x54\x47\x2a\x3c\x2a\xca\x74\x3d\x59\x71\x01\x12\x46\xe1\x1e\x2a\x51\xa3\x49\x1c\xf7\x14\xc5\xde\x65\x9b\x12\x8c\xd6\x70\xf1\xe5\xe1\x61\xf9\x70\x7b\x24\x3e\x4b\x3f\x84\x9a\x3e\xb8\xd7\xed\x6c\x28\x27\x5c\xf4\x29\x6d\x27\x59\x62\xcd\x35\xd9\xf7\x2a\x49\x77\xae\x51\x8d\x46\xd7\xd0\x14\xde\x66\xb3\x1a\x35\xa1\x4c\xc1\x3d\xa8\xbe\x6d\x89\x74\x93\xae\xea\xa5\x32\xd0\x77\x82\x72\x8d\xd2\xe2\xd9\x6b\xe3\x7c\x48\x73\x80\x5e\xa1\xf4\x6d\x37\xca\xfd\x83\xbc\x2e\xce\x7e\x86\x1b\xed\x5c\x72\x30\x4c\xc7\xd4\x93\xe5\x2b\x9f\xbb\xe9\xbf\x25\xe9\x3a\x5f\x47\x35\x55\x1d\x33\x1b\xc3\x86\xa1\x75\xff\xbf\xbd\xd2\x74\xb3\x4f\x2a\xc1\x35\x9a\xb0\x56\xe8\x8c\x35\x9c\x9f\x05\xd7\x84\x72\xcf\xeb\x37\x22\xa7\xd5\xbe\x58\xb5\x27\x22\xcd\xff\xa4\xa6\xd2\x8d\x92\xc2\x64\x60\xdf\xf2\x83\x44\x34\xc8\x9e\xb7\xc9\x90\x7d\xb5\xab\xd6\x6f\x5a\x0c\x40\x18\xdd\xf2\x84\x6a\x6c\x55\x7c\x1c\x52\xcd\x59\x3e\x5a\xe3\x5c\xdf\x48\x9f\x68\x8d\x25\x71\x0a\x8d\x9e\x02\x72\xc8\x81\xf4\x5a\x8c\xcc\x8e\x61\xf8\xb0\xfa\x63\x7c\x47\xdb\xad\xef\x10\xbb\xb0\x3c\xe6\x59\xe6\x89\xbe\x21\xef\xed\x6d\x27\x14\x75\xb0\x84\xd5\x42\x69\x5a\x3d\xef\xef\x46\x77\x87\x33\x3b\xdd\x56\x3e\x83\xcf\x8f\x44\xa7\xe0\x1e\x52\xe3\xbc\x53\x74\xd4\xc1\x0f\xf9\x30\x22\xbd\xf7\xd3\xe1\xa0\x5b\x22\x23\x9a\xbe\x9c\x4b\xcf\xe9\x79\xa1\x25\xe1\x41\x80\xb5\x12\x96\x59\xd6\xaa\x09\xa3\xa7\xec\xbd\x07\x92\x92\xca\x28\x7d\x6f\x52\x4d\xb1\x15\x25\x6e\x84\x0c\x6c\x3e\x21\xe6\xf3\x31\x9a\xa4\x54\x82\xf5\xda\x1a\x3f\x8a\xcc\x21\x35\xf2\xd0\x22\x1c\x58\x89\xdf\x6b\x5c\x29\x1d\xed\x6e\xc9\xd9\x49\xfa\x42\x15\x2d\x29\xa3\x7a\x5f\x40\x43\xeb\x1a\xf9\x80\xcd\x46\xc8\xd6\xf4\x50\xc2\xf0\x3f\x97\xd9\xd5\xe8\x3c\x11\x92\xda\xa1\x62\xd4\x45\x79\x1b\x83\x4a\x18\x83\xe5\x2a\x6b\x95\x57\x6b\x3e\x63\xce\x61\x72\x66\xe4\xfe\x02\x49\xcb\x15\xe3\x19\x7b\x63\x9f\x19\x4e\xbb\x93\x7b\x91\xdf\xc9\x16\x4f\x36\xb3\x3c\x1b\x4f\xde\x24\xca\xe8\xc0\x54\x6c\xa8\x54\x3a\xa9\x1a\xca\xea\xe9\xd5\x6e\xc4\xec\x26\x60\xfa\x2f\xaa\x19\x4e\x0f\xe5\xd1\x84\x59\xa6\x4b\x3f\x61\x1c\x4b\xea\x10\x8e\x15\xb9\x38\xbb\x7a\x1f\x0e\xa5\x63\x0f\xa7\x76\xf5\xb3\x1d\x26\xee\x2d\x51\xb5\xaf\xb2\xc1\x29\xa7\xc7\xc9\x89\xf5\x84\xfc\x5a\x8f\x29\xcd\xe0\xe8\x08\x1f\xf7\xbb\x92\x89\xea\x39\x26\x4a\x55\x5f\x1a\x23\xce\xaf\x0b\xd1\xda\x31\x9a\x8b\x6b\x3f\x16\xad\x0b\x51\xfc\x7a\xd3\x83\x2b\xa2\x70\xd4\xc7\x87\x31\x14\xf4\x0e\x4a\x19\x6a\x6d\x1a\x42\x47\x2a\x3b\x5d\x9d\xf6\xf0\x21\x7b\xf5\x4b\x15\xa3\xce\x51\x0a\x36\xfd\xed\x74\x00\x50\xb5\x26\xed\x0f\xfa\x63\xd2\x1b\x97\x55\xc7\xfa\x42\x93\x3a\x36\x95\x0b\xd9\x12\x76\x9a\x1b\xe1\x2b\x21\xfd\xc4\xab\x46\xc8\x77\x7a\xe1\x28\x55\x92\xa0\x5f\x18\x05\xa6\x42\xb2\x34\x5f\x8d\x60\xa4\xdc\x6a\xf2\x61\x3c\x74\x1e\xcf\x38\x74\x9e\x9b\xe0\xb3\xb7\x40\xbd\x6c\x8f\xac\x88\xfb\x97\x4f\x4a\xdf\x9f\xe2\x72\x88\xd8\x3b\xa2\x1b\x2f\xc3\xae\x1e\x09\xbe\x20\xd7\xca\x76\x91\x88\x36\x6a\x14\x83\x1b\xb9\x13\xf6\x28\x44\x28\x91\xc1\xd0\x21\xbd\xff\xd2\x62\x4d\x89\x59\x08\x11\x39\x10\x5e\xc3\x65\x54\x06\x6b\x53\xdb\x57\x8e\x75\xfc\xe9\x3f\xf1\x23\xca\x75\xe8\x0e\xa3\x9f\x5c\xfe\x70\x27\x13\xe1\x7e\x9b\xcd\x00\x26\xb7\x88\x89\x4d\xe1\xfc\x2a\x12\x04\xc5\x73\xff\xa4\x48\xc3\x6a\x3c\xd2\xe9\x49\x8f\xc6\xc8\xdb\xec\x6d\xf6\xff\x00\x00\x00\xff\xff\xc4\x34\x54\x34\x65\x12\x00\x00")

func cssIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_cssIndexCss,
		"css/index.css",
	)
}

func cssIndexCss() (*asset, error) {
	bytes, err := cssIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/index.css", size: 4709, mode: os.FileMode(420), modTime: time.Unix(1508614672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x5f\x6b\xdb\x30\x14\xc5\xdf\xf5\x29\xce\x9b\xe5\x74\xb8\x7d\xef\x52\x68\x4b\x1f\x06\x1b\x8c\xe5\xb1\x14\xe2\xca\xd7\xf6\x25\xf2\x55\x26\x5d\x27\x84\xd1\xef\x3e\x2c\xbb\xeb\x56\x32\xfa\x20\x30\xf8\x77\x74\xfe\xe8\x72\xb5\x32\x58\x61\x43\x3a\xee\x2b\x83\xd5\xa5\x31\x2e\x48\x52\xb0\xd2\x90\xb0\x46\x13\xdc\x38\x90\x68\xf5\x73\xa4\x78\xda\x90\x27\xa7\x21\xde\x7a\x6f\x8b\xea\x7b\xdd\x51\x51\x2e\x02\xcf\xb2\xfb\x48\xf0\x8d\x64\x44\x5d\x94\xc6\x2c\xbe\xf7\x3d\xb9\x1d\xb8\xc5\x96\xfc\x16\x9c\x10\x46\x9d\x4f\x8b\x03\xd3\x71\x89\xd4\x8e\xe2\x94\x83\x80\xd3\x1d\xf9\x70\xdc\xb8\x18\xbc\xb7\xe4\x4b\xfc\x32\x40\x24\x1d\xa3\x80\x7c\xd5\x91\xde\x85\x51\x1a\x96\xee\xde\x33\x89\xfe\x20\xa7\xb6\xac\x9e\x83\x6a\x18\x70\x83\x2b\xf3\xf2\xc7\xfc\xd6\x29\x1f\x6a\xa5\xdc\x15\x5b\xde\xbe\x77\xab\x17\xe0\x8b\xd2\x60\x79\xf6\xca\x35\xab\x36\xc4\x87\xda\xf5\x96\xb0\xbe\x01\x55\xce\xd7\x29\x7d\xe5\xa4\x55\xa4\x21\x1c\xc8\x16\x59\x4a\x45\x59\xbe\x4a\x1e\xf9\xe9\x2f\xac\x6e\x9a\x37\xe6\x5c\x24\xed\x09\x2e\xc4\x48\x4e\x31\x4c\xab\xe5\x8c\x6d\x88\xd3\x9f\x89\x74\x41\x94\x44\x13\x58\x32\x3c\xad\xb5\x0f\x51\xff\xd7\xc1\x2e\xf1\x49\xc1\x58\xe3\xca\x18\xe4\xeb\xec\x35\x18\x9f\xe7\xe7\xae\x3c\x49\xa7\xfd\x35\xf8\xe2\x62\xc6\x31\xbd\x8d\xfd\x77\xf5\x8c\x3e\xf2\x53\xf9\x8a\x00\xcf\x91\xea\x5d\xfe\x7e\x31\xd3\x31\x78\xbf\xdd\xb9\x8e\x29\xdf\x87\xb4\x3f\x41\x7b\x96\xee\xb4\x64\x3f\xb2\x34\xe1\x38\x6d\xf4\x70\x20\xd1\x69\x30\x12\x8a\xb6\x98\x05\xc5\x27\xe4\xd9\xdf\x9a\x95\xe6\x77\x00\x00\x00\xff\xff\x00\x4d\x68\x65\xc7\x02\x00\x00")

func jsIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_jsIndexJs,
		"js/index.js",
	)
}

func jsIndexJs() (*asset, error) {
	bytes, err := jsIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/index.js", size: 711, mode: os.FileMode(420), modTime: time.Unix(1507930305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xc1\x8e\xdb\x20\x14\xbc\xf7\x2b\x5e\xe9\xb5\x8e\x95\x5b\x0f\xb0\x97\xb4\x55\x2f\x55\x57\xda\x95\xaa\x1e\x09\xbc\x0d\x6c\x31\x76\xcd\xb3\x93\x95\xeb\x7f\xaf\x6c\xc7\x15\xe0\x68\xf7\x14\xd0\xcc\x3c\xcf\x0c\x10\xfe\xfe\xf3\x8f\xc3\xe3\xaf\xfb\x2f\x60\xa8\x72\x77\xef\xf8\xf2\x03\xc0\x0d\x4a\x3d\x2d\x00\x78\x85\x24\x41\x19\xd9\x06\x24\xc1\x3a\x7a\x2a\x3e\xb1\x18\x32\x44\x4d\x81\x7f\x3a\xdb\x0b\x76\x29\x3a\x59\xa8\xba\x6a\x24\xd9\xa3\x43\x06\xaa\xf6\x84\x9e\x04\xb3\x28\x50\x9f\x30\x51\x7a\x59\xa1\x60\xbd\xc5\x73\x53\xb7\x14\x91\xcf\x56\x93\x11\x1a\x7b\xab\xb0\x98\x37\x1f\xc1\x7a\x4b\x56\xba\x22\x28\xe9\x50\xec\xd7\x41\x64\xc9\xe1\xdd\x30\xec\x1e\xa7\xc5\x38\xc2\x5f\x18\x86\xdd\x43\x77\xa4\x65\xcf\xcb\x85\xb1\xb0\x9d\xf5\xbf\xa1\x45\x27\x58\xa0\x17\x87\xc1\x20\x12\x03\xd3\xe2\x93\x60\x64\xb0\xc2\x52\x36\x78\x29\x55\x08\xa5\xf5\x1a\x2f\x3b\x15\xc2\xfc\x25\x5e\xae\x8d\xf0\x63\xad\x5f\xae\xe3\xb4\xed\x41\x39\x19\x82\x60\x3f\x5b\xd9\x34\xd8\x5e\x6d\xa5\xd8\xa1\xf6\x24\xad\x8f\xd0\x14\xff\x86\x52\x27\x60\x0a\xcf\xc9\x40\xa1\xa7\x8c\x04\xc0\x43\x23\xfd\xca\x23\xbc\x10\x8b\xaa\xe0\xe5\x84\xbe\x22\x08\xdd\xf1\xbf\x26\x6e\x2c\x97\xf1\x52\xdb\x3e\xb2\xbe\x6c\x6f\x46\x39\x2c\x47\x58\x9c\xb3\x3a\x72\xde\x83\xd5\x78\x94\x9b\x38\x11\xe3\x3b\xfa\x2e\x83\x01\x86\xa1\x95\xfe\x84\xb0\xbb\x97\x27\x0c\xe3\x98\xc1\xe9\x04\x4b\x58\x6d\x26\xcc\x24\x79\x3d\xf2\x0f\x53\x70\xd7\x9d\xc6\x31\xed\x4d\x6e\x55\x59\x07\xab\x1d\xf4\x3a\x73\xb1\x21\xe6\x75\xdd\x2c\x2c\xf3\xf9\x46\xce\x78\xc0\xc4\x60\x60\xb5\x60\x51\x98\xad\x7d\xb3\x4f\x12\x9a\xfd\x96\x33\x0c\xbb\xab\x9b\xed\x07\xb7\xe9\x6f\x66\x8f\x7c\x7d\xad\xeb\xf9\xbe\xde\x90\xf2\xa0\x5a\xdb\x10\x84\x56\x25\xcf\xee\x79\x7d\x75\xcf\x61\xd2\x2d\xac\xb7\x2f\x62\xb2\xe4\xe5\xf2\x3e\x79\xb9\xfc\x97\xfd\x0b\x00\x00\xff\xff\xa5\x5c\xdd\x8c\xe3\x04\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 1251, mode: os.FileMode(420), modTime: time.Unix(1507930315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/index.css": cssIndexCss,
	"js/index.js": jsIndexJs,
	"views/index.html": viewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"index.css": &bintree{cssIndexCss, map[string]*bintree{}},
	}},
	"js": &bintree{nil, map[string]*bintree{
		"index.js": &bintree{jsIndexJs, map[string]*bintree{}},
	}},
	"views": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

