// Code generated by go-bindata.
// sources:
// files/css/index.css
// files/js/index.js
// files/views/index.html
// DO NOT EDIT!

package apex

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssIndexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x5f\x6f\xe3\xb8\x11\x7f\xf7\xa7\x18\x38\x38\x60\xd3\x5a\x82\xe4\xc4\x89\x57\x0b\x2c\x7a\xdd\xdb\xe0\xfa\xb0\xed\xa1\xe9\xa1\x7d\xa5\xa4\x91\xc4\x86\x22\x05\x92\x4a\x9c\x2d\xf2\xdd\x0b\xfe\x91\x4c\xda\x72\xee\x0e\x79\x88\x44\x0e\x67\x86\xbf\xf9\xcd\x1f\xb9\x90\x42\x68\xf8\xdf\x0a\x20\x49\x90\x28\x2c\xa0\x1a\x4b\x5a\x25\x25\x7e\xa7\x28\x3f\xa4\xfb\xed\x06\xb2\x0d\xa4\xf9\x76\x03\xf9\xf5\x27\x2b\xf7\x42\x6b\xdd\x15\xb0\xcf\xb2\xe1\xe0\x56\x3a\x24\x35\xca\xa4\x43\xda\x76\xba\x80\x5b\xb7\x63\xb7\xb4\x24\xd5\x13\xe5\x6d\x01\x59\x9a\xed\x24\xf6\x9f\xa2\xe5\xa4\xc7\x9a\x8e\xbd\xd9\x5d\xd8\x64\x44\xb6\x68\xf6\xf6\x76\xcf\x6e\xd6\x44\x3e\x15\x70\x95\x65\x99\x13\x2e\xd9\x88\x05\x5c\xdd\xdc\xfc\xf8\xf1\xe1\xc1\x2d\x31\xe3\x46\xd2\x4a\xf2\x5a\xc0\x55\x43\xcc\x9f\x3f\x5c\xb6\x66\xa5\x69\x9c\x5c\x63\xde\xf6\x77\xfb\xaf\x1f\xef\xa6\x85\x49\xfd\x36\xdf\xee\xb6\x1f\xdd\x6a\x2b\xc9\x60\x4c\xec\x9a\x9b\xba\xba\xf5\x9a\x14\x32\xac\x34\x15\xdc\xea\x7c\x26\xf2\x83\x73\xc5\x63\x74\xdc\x36\x46\x5e\x3a\xaa\xf1\xd3\xea\x6d\xb5\xfa\x93\xc5\xba\x14\x87\x44\xd1\xef\x16\x96\x52\x48\x83\x5d\x29\x0e\x56\xa0\xd3\x3d\xdb\x40\x29\xea\x57\x2b\xd9\x08\xae\x93\x86\xf4\x94\xbd\x16\x90\x90\x61\x60\x98\xa8\x57\xa5\xb1\xdf\xc0\x5f\x19\xe5\x4f\xdf\x48\xf5\x68\xdf\x1f\x04\xd7\x9b\x15\x00\xc0\xfa\x11\x5b\x81\xf0\xeb\xdf\xd6\x1b\x58\xff\x53\x94\x42\x0b\xf3\xf4\x8f\xc3\x6b\x8b\x7c\xed\x65\x7e\x2d\x47\xae\x47\xb3\xfe\x85\x70\x4d\x24\x32\x66\x5e\x1e\xa8\x24\xf0\x48\xb8\x9a\xe4\x7e\x92\x82\xd6\x7e\x05\xd6\x3f\x23\x7b\x46\x4d\x2b\x02\x7f\xc7\x11\xd7\x1b\x50\x84\xab\x44\xa1\xa4\x16\x52\xeb\xad\xa2\xdf\xb1\x80\x7c\xe7\xc8\x61\x97\x5e\x3c\x31\x6e\x5c\xd0\x4a\x52\x3d\xb5\x52\x8c\xbc\x9e\x91\x6b\x2d\x6e\x95\x60\x42\x4e\x6b\x3e\x18\x76\x83\x51\x8e\x33\xbd\x72\xb3\xd2\x13\xd9\x52\x5e\x80\x55\x38\x90\xba\x76\x1c\xb3\x18\x16\xc5\x0c\xbf\x83\xfb\xcc\x5e\x18\xbd\x73\xcb\x61\xf0\xae\x5d\x54\xf2\x0d\x74\xdb\x0d\x74\x37\x1b\xe8\x6e\xad\x52\xe7\x40\xa2\xc5\x50\xc0\xbd\xbf\xac\x5f\x2b\x85\xd6\xa2\xf7\xbe\x85\x98\xa4\x5b\xcf\xf1\x08\x95\x3b\x87\x4a\x7c\xc7\x39\x1d\x2e\x60\x62\x9d\x3a\x73\xe4\xdc\xa2\x53\xe3\xa4\xff\x0c\xc3\x91\x54\xb1\xc0\x99\xf9\x3b\x7b\x88\x58\x79\xef\x02\xe5\x1d\x4a\xaa\x8d\xb0\xc6\x83\x4e\x6a\xac\x84\x24\x06\xa7\x02\xb8\xe0\x8e\xe0\x43\xe0\x53\x01\xdb\xdd\x70\x80\xa5\xdb\xdd\xef\x96\xee\x66\xdf\x5d\xfa\xba\x2b\x32\x0a\x4a\x4b\xc1\xdb\xcd\x6a\xf0\x4f\xa1\x47\xe7\x44\x89\x80\xdd\x65\xd9\xa4\x85\x18\x05\xe4\x0f\x9c\xbd\xcd\x42\x66\xcd\x21\xbd\x71\x81\x9e\x93\xd6\xad\xe6\xc3\x01\x6a\xa1\x35\xd6\x70\x55\xd7\xf5\x6c\xb4\xe8\xc4\x33\x4a\x6b\xda\x3d\x9e\x3b\x30\xd7\x8c\x13\x95\x01\xa0\xe1\xd9\x48\x2a\x89\x34\xd9\x17\x07\xdb\xc8\xa2\x28\xec\x32\x13\x05\xf7\xef\xc6\x17\xed\x93\x94\x19\x19\x9c\x1c\xca\xdd\xa1\xfc\x78\xc8\x89\x31\x1a\xeb\x9e\x02\xfc\x7e\x2c\xcf\xe9\xed\x69\xe9\x34\xbe\x13\xda\xe9\x5a\x17\x62\x3b\x48\xbc\x90\xe3\xc7\x2e\x70\x9e\xe1\x73\xcc\x67\x18\x26\x5c\x3c\xc0\x92\xd4\x74\x54\x05\x6c\xdd\xaa\xc1\xbf\x61\xe2\x25\x39\x14\x40\x46\x2d\x26\x77\x0a\x58\x3f\x8a\x51\x56\x08\x5f\x44\x8d\xf0\x8b\x34\x95\xf6\x1b\x72\x26\x36\xd0\x0b\x2e\xd4\x40\x2a\x3c\xc9\xc9\x74\xbf\x98\x70\x3b\xdf\xfd\x5e\xb0\x7c\xa2\x3a\x71\x07\x7a\x21\x74\x67\xfd\x23\x5c\x53\xc2\x28\x51\x38\xd3\xeb\x33\x54\xa2\x46\xc3\x2e\xf7\x14\x10\xc4\x51\x52\x09\x46\x6b\xb8\xfa\xe9\xeb\xd7\xed\xd7\xbb\x13\x2f\xb2\xf4\x7e\xca\xfc\x23\x06\xc3\xc1\xc6\x7b\x01\x07\xcf\x7b\xdb\xc8\x12\x7b\x2b\x43\xd1\x17\x49\x86\x4b\xe5\x2c\xea\x5c\x41\xe9\xf8\xbd\x17\xac\x51\x13\xca\x14\x7c\x06\x35\xf6\x3d\x91\xae\x1f\x56\xa3\x54\x26\x8c\x83\xa0\x5c\xa3\xb4\xb1\x19\xb5\x81\x72\x4a\x19\x80\x51\xa1\xf4\x35\x3c\xc8\xa3\xa3\xbe\x21\xcc\x24\x86\x8d\x76\x37\x77\x68\x39\x7e\xd8\x96\x1f\x12\xc4\xcb\xb9\xae\xf6\xb6\x5a\xa5\xff\x96\x64\x18\x7c\x52\xd6\x54\x0d\xcc\x0c\x1b\x0d\x43\x0b\xd3\x7f\x47\xa5\x69\xf3\x9a\x54\x82\x6b\x34\x2c\xa9\xd0\x79\x6b\x4e\x7e\x11\x5c\x13\xca\xfd\x59\x3f\x4c\x39\xb3\xf6\xc5\x9a\x3d\x53\x69\xfe\x27\x35\x95\xae\x31\x15\x86\xce\x63\xcf\x8f\x1a\xd1\x44\xe0\xb2\x4f\x46\xec\x67\x3b\xa5\xfd\x41\x8f\x01\x08\xa3\x2d\x4f\xa8\xc6\x5e\x85\xcb\x13\x73\x9d\xe7\xd1\x04\xe8\x8a\x50\xfa\x48\x6b\x2c\x89\x33\x68\xec\x14\x90\x43\xee\xd3\x27\x70\x3b\x84\xe1\x7e\xf7\x43\xbc\x47\xfb\xd6\x97\x9b\xc3\x34\x77\xe6\x59\xe6\x85\xbe\x21\x1f\xed\xee\x20\x14\x75\xb0\x4c\xec\x52\x9a\x56\x4f\xaf\x9f\xa2\xbd\xe3\x9a\xed\x95\x3b\xcf\xf4\x8b\xfd\xe0\xf7\x32\xd5\xf9\xf1\x19\x52\x83\x91\xf3\xe7\xa4\x6b\x1c\x69\x13\x89\x7e\xf6\x1d\xe9\xe8\xa2\x44\x46\x34\x7d\xbe\x44\xe3\xe5\x1e\xa5\x25\xe1\x93\x02\x7b\x19\xd8\x66\x59\xaf\x16\xee\x76\xbd\xec\x44\x4a\x2a\x63\xf4\xbd\xee\xb8\x74\xac\x28\xb1\x11\x72\x3a\xe6\x79\xb3\x5e\xc7\xa0\x93\x52\x09\x36\x6a\xeb\x7c\x14\xc0\x23\x83\xf2\xa9\xe2\x38\xb0\x12\x3f\x4c\xb9\x8c\x3b\x19\x18\x93\x8b\xd1\x7a\xa6\x8a\x96\x94\x51\xfd\x5a\x40\x47\xeb\x1a\xf9\x8c\x4d\x23\x64\x5f\x80\xaa\x08\xc3\xff\x7c\xc8\xae\xa3\xf5\x44\x48\x6a\x1b\x99\x31\x17\xd0\x3b\x04\x95\x30\x06\xdb\x5d\xd6\x2b\x6f\xd6\x7c\x28\x5d\xc2\xe4\x42\x9b\xff\x0d\x24\xed\xa9\x10\xcf\xf0\x36\xf6\x99\xe1\xf2\x75\x72\xaf\xf2\x17\xd2\xe2\xd9\x38\x98\x67\x71\xb7\x4f\x02\xe2\x4f\x87\x8a\x86\x4a\xa5\x93\xaa\xa3\xac\x5e\x9e\x27\xa3\xc3\xae\xeb\xa6\xff\xa2\x9a\xe1\xf2\x20\x10\xf5\xb5\x6d\xba\xf5\x8d\xde\x1d\x49\x1d\xc2\xa1\x21\x17\xe7\xa9\xab\xfa\x45\xe9\x8e\x4f\xab\x76\xde\xb4\x85\x28\x2c\x41\x41\x51\xd8\x65\xf3\xa5\x9c\x1d\xa7\x27\xb4\x33\xf1\x6b\x1f\x4b\x9a\x06\x33\x10\x1e\x97\xc5\x92\x89\xea\x29\x14\x4a\xd5\x58\x1a\x27\x2e\x8f\x28\xc1\xa8\x13\xb5\xd9\xbd\xef\xb2\xf6\x0a\x41\xfc\x46\x53\xaa\x2b\xa2\x30\x2a\xf7\x73\xbb\x9a\xec\xce\x46\x19\x6a\x6d\x0a\xc2\x40\x2a\x5b\x85\x9c\xf5\xe9\x53\xf9\xfa\x37\x4d\x44\x95\xa3\x14\xac\x3e\xfd\x54\xb8\x8b\x01\x54\xbd\xa1\xfd\xd1\x7e\x28\x7a\xeb\x58\x75\x6a\x6f\x2a\x52\xa7\xae\x72\x21\x7b\xc2\xce\xb9\x31\x7d\x9a\xa4\x3f\xf2\xaa\x13\xf2\x9d\x5a\x18\x51\x25\x99\xec\x0b\x63\xc0\x64\x48\x96\xe6\xbb\x08\x46\xca\xad\x25\x1f\xc6\x63\xe5\xf1\x07\xe7\xca\x73\x3b\xdd\xd9\x7b\xa0\x9e\xdb\x13\x2f\xc2\xfa\xe5\x49\xe9\xeb\x53\x98\x0e\xc1\xf1\x81\xe8\xce\xeb\xb0\x23\x4a\x82\xcf\xc8\xb5\xb2\x55\x24\x90\x0d\x0a\xc5\x7c\x8d\xdc\x29\x7b\x10\x62\x4a\x91\xd9\xd1\x23\xbd\xbf\xa1\x52\x71\xae\x87\x9f\x59\xf3\x2c\xb7\xf5\x5e\x86\x73\xf1\x15\xde\x37\x3b\xf7\xe3\xc7\xc2\x98\x78\x7f\x5b\x65\x4d\x75\x79\xf6\xf3\xac\xbf\xca\xab\x7b\xac\xef\x62\x67\xe2\xaf\x3e\x07\xca\x5f\x7a\xac\x29\x01\x55\x49\x44\x0e\x84\xd7\xf0\x21\x48\xd8\xbd\xa9\x42\xd7\xee\x92\xf1\x4f\x1e\x0b\x3f\x28\xdd\x4c\x75\x2c\xfa\xf9\xe9\x07\xb7\xb2\x40\xcc\xb7\xd5\x0a\x60\x71\x2c\x5a\x18\x7d\x2e\xcf\x56\x93\xa2\x70\x90\x39\x2b\x27\xd3\x87\x43\x64\xd3\x8b\x9e\x34\xbc\xb7\xd5\xdb\xea\xff\x01\x00\x00\xff\xff\x93\x84\x90\xe3\x71\x13\x00\x00")

func cssIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_cssIndexCss,
		"css/index.css",
	)
}

func cssIndexCss() (*asset, error) {
	bytes, err := cssIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/index.css", size: 4977, mode: os.FileMode(420), modTime: time.Unix(1522254193, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x5f\x6b\xdb\x30\x14\xc5\xdf\xf5\x29\xce\x9b\xe5\x74\xb8\x7d\xef\x52\x68\x4b\x1f\x06\x1b\x8c\xe5\xb1\x14\xe2\xca\xd7\xf6\x25\xf2\x55\x26\x5d\x27\x84\xd1\xef\x3e\x2c\xbb\xeb\x56\x32\xfa\x20\x30\xf8\x77\x74\xfe\xe8\x72\xb5\x32\x58\x61\x43\x3a\xee\x2b\x83\xd5\xa5\x31\x2e\x48\x52\xb0\xd2\x90\xb0\x46\x13\xdc\x38\x90\x68\xf5\x73\xa4\x78\xda\x90\x27\xa7\x21\xde\x7a\x6f\x8b\xea\x7b\xdd\x51\x51\x2e\x02\xcf\xb2\xfb\x48\xf0\x8d\x64\x44\x5d\x94\xc6\x2c\xbe\xf7\x3d\xb9\x1d\xb8\xc5\x96\xfc\x16\x9c\x10\x46\x9d\x4f\x8b\x03\xd3\x71\x89\xd4\x8e\xe2\x94\x83\x80\xd3\x1d\xf9\x70\xdc\xb8\x18\xbc\xb7\xe4\x4b\xfc\x32\x40\x24\x1d\xa3\x80\x7c\xd5\x91\xde\x85\x51\x1a\x96\xee\xde\x33\x89\xfe\x20\xa7\xb6\xac\x9e\x83\x6a\x18\x70\x83\x2b\xf3\xf2\xc7\xfc\xd6\x29\x1f\x6a\xa5\xdc\x15\x5b\xde\xbe\x77\xab\x17\xe0\x8b\xd2\x60\x79\xf6\xca\x35\xab\x36\xc4\x87\xda\xf5\x96\xb0\xbe\x01\x55\xce\xd7\x29\x7d\xe5\xa4\x55\xa4\x21\x1c\xc8\x16\x59\x4a\x45\x59\xbe\x4a\x1e\xf9\xe9\x2f\xac\x6e\x9a\x37\xe6\x5c\x24\xed\x09\x2e\xc4\x48\x4e\x31\x4c\xab\xe5\x8c\x6d\x88\xd3\x9f\x89\x74\x41\x94\x44\x13\x58\x32\x3c\xad\xb5\x0f\x51\xff\xd7\xc1\x2e\xf1\x49\xc1\x58\xe3\xca\x18\xe4\xeb\xec\x35\x18\x9f\xe7\xe7\xae\x3c\x49\xa7\xfd\x35\xf8\xe2\x62\xc6\x31\xbd\x8d\xfd\x77\xf5\x8c\x3e\xf2\x53\xf9\x8a\x00\xcf\x91\xea\x5d\xfe\x7e\x31\xd3\x31\x78\xbf\xdd\xb9\x8e\x29\xdf\x87\xb4\x3f\x41\x7b\x96\xee\xb4\x64\x3f\xb2\x34\xe1\x38\x6d\xf4\x70\x20\xd1\x69\x30\x12\x8a\xb6\x98\x05\xc5\x27\xe4\xd9\xdf\x9a\x95\xe6\x77\x00\x00\x00\xff\xff\x00\x4d\x68\x65\xc7\x02\x00\x00")

func jsIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_jsIndexJs,
		"js/index.js",
	)
}

func jsIndexJs() (*asset, error) {
	bytes, err := jsIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/index.js", size: 711, mode: os.FileMode(420), modTime: time.Unix(1507930305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xc1\x8e\xdb\x20\x14\xbc\xf7\x2b\x5e\xe9\xb5\x8e\x95\x5b\x0f\xb0\x97\xb4\x55\x2f\x55\x57\xda\x95\xaa\x1e\x09\xbc\x0d\x6c\x31\x76\xcd\xb3\x93\x95\xeb\x7f\xaf\x6c\xc7\x15\xe0\x68\xf7\x14\xd0\xcc\x3c\xcf\x0c\x10\xfe\xfe\xf3\x8f\xc3\xe3\xaf\xfb\x2f\x60\xa8\x72\x77\xef\xf8\xf2\x03\xc0\x0d\x4a\x3d\x2d\x00\x78\x85\x24\x41\x19\xd9\x06\x24\xc1\x3a\x7a\x2a\x3e\xb1\x18\x32\x44\x4d\x81\x7f\x3a\xdb\x0b\x76\x29\x3a\x59\xa8\xba\x6a\x24\xd9\xa3\x43\x06\xaa\xf6\x84\x9e\x04\xb3\x28\x50\x9f\x30\x51\x7a\x59\xa1\x60\xbd\xc5\x73\x53\xb7\x14\x91\xcf\x56\x93\x11\x1a\x7b\xab\xb0\x98\x37\x1f\xc1\x7a\x4b\x56\xba\x22\x28\xe9\x50\xec\xd7\x41\x64\xc9\xe1\xdd\x30\xec\x1e\xa7\xc5\x38\xc2\x5f\x18\x86\xdd\x43\x77\xa4\x65\xcf\xcb\x85\xb1\xb0\x9d\xf5\xbf\xa1\x45\x27\x58\xa0\x17\x87\xc1\x20\x12\x03\xd3\xe2\x93\x60\x64\xb0\xc2\x52\x36\x78\x29\x55\x08\xa5\xf5\x1a\x2f\x3b\x15\xc2\xfc\x25\x5e\xae\x8d\xf0\x63\xad\x5f\xae\xe3\xb4\xed\x41\x39\x19\x82\x60\x3f\x5b\xd9\x34\xd8\x5e\x6d\xa5\xd8\xa1\xf6\x24\xad\x8f\xd0\x14\xff\x86\x52\x27\x60\x0a\xcf\xc9\x40\xa1\xa7\x8c\x04\xc0\x43\x23\xfd\xca\x23\xbc\x10\x8b\xaa\xe0\xe5\x84\xbe\x22\x08\xdd\xf1\xbf\x26\x6e\x2c\x97\xf1\x52\xdb\x3e\xb2\xbe\x6c\x6f\x46\x39\x2c\x47\x58\x9c\xb3\x3a\x72\xde\x83\xd5\x78\x94\x9b\x38\x11\xe3\x3b\xfa\x2e\x83\x01\x86\xa1\x95\xfe\x84\xb0\xbb\x97\x27\x0c\xe3\x98\xc1\xe9\x04\x4b\x58\x6d\x26\xcc\x24\x79\x3d\xf2\x0f\x53\x70\xd7\x9d\xc6\x31\xed\x4d\x6e\x55\x59\x07\xab\x1d\xf4\x3a\x73\xb1\x21\xe6\x75\xdd\x2c\x2c\xf3\xf9\x46\xce\x78\xc0\xc4\x60\x60\xb5\x60\x51\x98\xad\x7d\xb3\x4f\x12\x9a\xfd\x96\x33\x0c\xbb\xab\x9b\xed\x07\xb7\xe9\x6f\x66\x8f\x7c\x7d\xad\xeb\xf9\xbe\xde\x90\xf2\xa0\x5a\xdb\x10\x84\x56\x25\xcf\xee\x79\x7d\x75\xcf\x61\xd2\x2d\xac\xb7\x2f\x62\xb2\xe4\xe5\xf2\x3e\x79\xb9\xfc\x97\xfd\x0b\x00\x00\xff\xff\xa5\x5c\xdd\x8c\xe3\x04\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 1251, mode: os.FileMode(420), modTime: time.Unix(1510864100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/index.css": cssIndexCss,
	"js/index.js": jsIndexJs,
	"views/index.html": viewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"index.css": &bintree{cssIndexCss, map[string]*bintree{}},
	}},
	"js": &bintree{nil, map[string]*bintree{
		"index.js": &bintree{jsIndexJs, map[string]*bintree{}},
	}},
	"views": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

