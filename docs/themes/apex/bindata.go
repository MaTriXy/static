// Code generated by go-bindata.
// sources:
// files/css/index.css
// files/js/index.js
// files/views/index.html
// DO NOT EDIT!

package apex

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssIndexCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x20\x12\x14\x48\x36\x4b\x90\x9c\x38\x75\x15\xa0\x58\xd7\x26\xe8\x1e\xba\x15\xcb\x8a\xed\x95\x92\x68\x9b\x0b\x25\x0a\x14\xe5\x24\x1d\xfa\xdd\x77\xe4\x91\x32\x69\xcb\x29\x8a\xa2\xb0\x74\xbc\xff\xf7\xe3\xdd\x29\x85\x92\x52\x93\xff\x4e\x08\x49\x12\x46\x7b\x56\x90\x6a\x28\x79\x95\x94\xec\x2b\x67\xea\x3c\x5d\xce\x67\x24\x9b\x91\x34\x87\xdf\xfc\xe2\xc6\xf2\x3d\xf2\x5a\x6f\x0a\xb2\xcc\xb2\xee\x09\x29\x1b\x46\x6b\xa6\xe0\x87\xaf\x37\xba\x20\x57\x78\x62\x8f\xb4\xa2\xd5\x03\x6f\xd7\x05\xc9\xd2\x6c\xa1\x58\x73\x13\x91\x93\x86\xd5\x7c\x68\xcc\xe9\xc4\xa1\xa0\x6a\xcd\xcc\xd9\xd2\x9e\xd9\xc3\x9a\xaa\x87\x82\x9c\x65\x59\x86\xcc\xa5\x18\x80\xe5\xec\xf2\xf2\xdd\x9b\xbb\x3b\x24\x09\xe3\x46\xb2\x56\xf4\x19\x0e\x56\xd4\xfc\x73\xc2\xe5\xda\x50\x56\x2b\xe4\x5b\x99\xb7\xe5\xf5\xf2\xf6\xcd\xb5\x27\x78\xf5\xf3\x7c\xbe\x98\xbf\x71\x52\x3d\x13\xac\xd2\x5c\xb6\x56\x7e\x4b\xd5\x39\x9a\x75\xf9\xd8\x1d\x1b\x85\x8f\x1b\xae\xd9\xcd\xc9\xb7\x93\x93\x9f\x6c\x5e\x4b\xf9\x94\xf4\xfc\xab\x4d\x41\x29\x95\xc9\x13\x90\x2c\xc3\x46\x37\x62\x06\xc4\xfa\xd9\x72\xae\x64\xab\x93\x15\x6d\xb8\x00\xbf\x13\xda\x75\x82\x25\xfd\x73\xaf\x59\x33\x23\xbf\x0a\xde\x3e\x7c\xa2\xd5\xbd\x7d\xbf\x03\xce\x19\x48\x10\x72\x7a\xcf\xd6\x92\x91\x2f\xbf\x9d\xce\xc8\xe9\x9f\xb2\x94\x5a\x9a\xa7\x3f\x9e\x9e\xd7\xac\x3d\x75\x3c\x5f\xca\xa1\xd5\x83\xa1\xbf\xa7\xad\xa6\x8a\x09\x61\x5e\xee\xb8\xa2\xe4\x9e\xb6\xbd\xe7\xfb\xa0\x24\xaf\x1d\x85\x9c\x7e\x64\x62\xcb\x34\xaf\x28\xf9\x9d\x0d\x0c\x28\x3d\x1c\x40\xb0\x8a\x63\xfa\x1e\x59\xf9\xc0\xc1\x61\xe3\x75\xdf\x00\x8c\x36\x36\x46\xb0\xc0\xa9\xe0\x80\xa5\xfa\xc6\x07\x05\xf1\x43\x8d\xf2\x6b\xc4\x8b\x25\x3d\x3a\xac\x5c\x62\x1d\x4b\xa8\xf8\x5a\xc9\xa1\xad\xc7\x04\xaf\x6d\x7a\x2b\x29\xa4\xf2\x34\x57\x1f\x7b\x00\x09\x61\x23\xe2\x72\x43\x69\x00\x2d\xbc\x05\xb8\x98\x97\x8e\xd6\x35\xc2\xce\xa6\xba\x28\xc6\x2a\x61\x55\x0e\xec\x85\x45\x3e\xb4\x1c\xd6\xf8\x02\x8b\x97\xcf\xc8\x06\x6e\xc5\xe6\x12\xfe\x5f\x59\xa5\xe8\x40\xa2\x65\x57\x90\xd7\x0b\x0c\xd6\xd1\xa0\x30\x5a\x36\xce\xb7\x30\x27\xe9\xdc\xc1\x3e\xca\xca\x35\x66\x25\x8e\x71\xbc\x21\x47\x72\x62\x9d\x3a\x70\xe4\xd0\x22\xaa\x41\xee\x9f\x49\xb7\xc3\x5e\xcc\x70\x60\xfe\xda\x0a\x51\xcb\xef\x5c\xe0\xed\x06\xf0\xa0\x0d\xb3\x66\x4f\x3a\xa9\x59\x25\x15\x35\x79\x2a\x48\x2b\x5b\xbc\x07\x5d\xe0\x53\x41\xe6\x90\x18\x32\x15\xdd\xf5\x54\x68\xf6\x1d\x2f\x34\x46\x28\x38\xe9\xb5\x92\xed\x7a\x06\x7a\xf1\x29\x74\xe8\x10\x27\x51\x5e\x17\x59\xe6\xb5\x50\xa3\x80\xfe\x80\xec\x55\x16\x02\x6b\xac\xe8\x25\xd6\x79\xbc\xda\x48\xcd\x21\xc8\x1a\x9e\x59\x4d\xce\xea\xba\x1e\x8d\x16\x1b\xb9\x65\xca\x9a\xc6\xc7\x43\x07\xc6\xce\xb2\xa7\x32\xc8\x67\x28\x1b\x71\x25\x91\x26\xfb\x82\x69\x1b\x44\x54\x84\x45\x66\x8a\x80\x3f\x97\xae\x8d\xef\xdd\x18\x90\xd8\x13\xca\x51\x28\xdf\x09\x21\x1b\xc4\x15\xe9\xf6\xf5\x7d\xb9\x96\x87\xe8\x76\xa8\x44\x8d\x2f\x94\xd6\x87\x75\xa4\xb6\x9d\x62\x47\xae\xf8\x6e\x2e\x1c\x5e\xf0\xb1\xe6\x63\x1a\x7c\x5e\x5c\x82\x15\x85\x41\xd5\x03\x7e\x91\x6a\xf2\xbf\x12\xf2\x31\x79\x2a\x48\x5f\x29\x29\x84\x77\xa8\x80\xa6\x2c\x07\x55\x31\xf2\x5e\xd6\x8c\x7c\x56\xa6\x23\x7f\x62\xad\x90\x33\xd2\xc8\x56\xf6\x1d\xad\xd8\xde\xa5\x4c\x97\x93\x37\xce\xa7\x04\xf2\xf1\x16\xdc\xad\x99\x01\x0e\x3e\x05\xb5\x47\xb4\xf5\x52\x40\xf3\x3e\xfb\x70\x7b\x3b\xbf\xbd\xde\x53\x9f\xa5\xaf\xfd\x9d\xde\x85\x07\x32\xf9\x74\x88\x0e\xd2\x76\x92\x25\xd6\x5d\x83\xbe\x47\x45\xbb\x63\x8d\x2a\x1a\x5d\x63\x53\x00\xcf\x6b\xa6\x29\x17\x3d\x38\xdd\x0f\x0d\x20\x04\x27\x5d\x35\xa8\xde\xa4\xbe\x93\xbc\xd5\x4c\xd9\x7c\x0e\xda\x04\xef\x61\x4e\xc8\x00\x93\xc6\xb5\xdd\x00\xfb\x3b\x7d\x5d\x88\x7e\xc1\x56\x1a\x43\xc2\x34\x4c\xd7\xd4\xb1\xe5\x0b\x87\xdd\xf4\x6f\x08\xa9\x73\xf7\xa8\xe6\x7d\x27\xcc\xc6\xb0\x12\xcc\x86\xff\xef\xd0\x6b\xbe\x7a\x06\xb8\x81\x8f\xa6\xac\x15\x43\x67\x8d\xe4\x7b\x20\x52\xf0\x17\x65\xdd\x46\x84\x56\xed\x8b\x35\x7b\xa0\xd2\xfc\x26\x35\x57\x38\x4a\x0a\x83\xc0\xa1\x69\x77\x1a\x99\xc9\xec\x71\x9f\x0c\xdb\x47\xbb\x6a\xfd\xa0\xc7\x84\xc0\x44\x5e\xb7\x09\xd4\xb3\xe9\x43\xb2\x87\x1a\x7a\x1e\xad\x71\xd8\x37\xd2\x7b\x5e\xb3\x92\xa2\x41\x63\x07\xd2\x07\xff\xe8\xa0\x65\xe4\x76\x98\x86\xd7\x8b\x57\x78\x06\xa0\x1f\xec\x41\x27\x7b\x8e\x11\xfb\xad\x01\x1c\xad\x1e\x9e\x6f\xa2\xb3\x1d\xcd\x0e\xae\x85\x03\xe7\xf1\x69\x87\x06\xde\x92\xd4\xc4\x85\x86\xf6\x9a\xf3\xae\xd4\x11\xeb\x5b\xd7\xf8\x77\xb6\x61\x27\x82\xb1\xb5\x3d\x86\xbc\xe9\x51\x00\x7b\x6a\xeb\x15\x58\x2f\xc9\x3c\xcb\x9a\x7e\xc2\xe9\x29\x7f\xc1\x89\x94\x56\xc6\xe8\x4b\x43\x68\x4a\xac\x28\xd9\x4a\x2a\x2f\xe6\x6a\x7d\x7a\x1a\x67\x93\x96\x70\x15\x06\x6d\x9d\x77\x85\xc9\xb3\xec\x55\x58\xf5\xdc\xdf\x7e\x4c\x56\xe2\x56\x16\xbc\x25\x7b\x6b\x59\x72\x74\x48\x6e\x79\xcf\x4b\x2e\xb8\x06\x24\x6e\x78\x5d\xb3\x76\xcc\x0d\x78\xd9\x98\xf6\x48\x05\xfb\xe7\x3c\xbb\x88\xe8\x89\x54\xdc\xce\x0b\x63\x2e\x80\x64\x98\x54\x2a\x04\xec\x0b\x90\x52\x67\xd6\x7c\xa1\x1c\xcb\xc9\x91\x69\xfa\x9d\x4c\x5a\xa9\x30\x9f\x61\x34\xf6\x59\xb0\xe9\x70\x72\xa7\xf2\x33\x5d\xb3\x83\xa5\x2b\xcf\xe2\xa1\x9a\x04\x88\xf6\x42\xc5\x8a\xab\x5e\x27\xd5\x86\x8b\x7a\x7a\x6b\x8b\x84\x71\xb8\xa5\x7f\x71\x2d\xd8\xf4\xbc\x8d\x86\xc7\x3c\x9d\xbb\xe1\x81\x22\x29\x66\x38\x34\x84\x75\xc6\xab\x3c\x12\x15\x8a\x7b\xaa\xdd\xea\x6c\xf3\x08\xdb\x46\x43\x9f\xfc\x57\xe0\x22\x1b\x83\x42\x3b\xa8\x27\xb4\xe3\xf1\xb5\x8c\x39\xcd\x4c\xe8\x68\x1b\xb7\xb2\x52\xc8\xea\x21\x64\x4a\xfb\xa1\x34\x4e\x1c\xdf\x04\x82\x8d\x22\x1a\x79\x4b\x37\xf1\x6c\x08\x41\xfd\x06\xd3\x5e\x2b\x40\x52\xd4\xa2\xc7\x09\xe3\xed\x8e\x46\x05\x83\x35\x4e\xd9\x39\x68\x07\x27\x5a\xf7\xdf\xa8\x17\xdf\x35\x11\x75\x8e\x52\x8a\xe9\xcf\xa2\x5d\x02\xfb\xc6\xc0\x7e\x67\x3f\x64\xbd\x42\x54\xed\xdb\xf3\x4d\x6a\xdf\xd5\x16\x4e\xa9\x38\xc4\x86\xff\x00\x48\xdf\xb5\xd5\x46\xaa\x17\x7a\x61\x04\x95\xc4\xdb\x97\xc6\x80\xb9\x21\x59\x9a\x2f\xa2\x34\xf2\xd6\x5a\x72\x65\xdc\x75\x1e\x27\x38\x76\x9e\x2b\x1f\xb3\xf3\xa0\xdf\xae\xf7\xbc\x08\xfb\x97\x03\xa5\xeb\x4f\xe1\x75\x08\xc4\x3b\xaa\x37\x4e\x87\xdd\x2a\x12\xb6\x05\xc0\xf6\xb6\x8b\x04\xbc\x41\xa3\x18\xc3\xc8\x51\xd9\x1d\x7c\xc4\xba\xa3\xd1\xd1\x11\xde\xbf\x98\xbf\x54\x50\xb3\xeb\x31\xd6\xc2\x57\x6e\x4d\xce\x83\x6b\xb0\x34\x77\xfb\x02\x45\xe3\xaf\xfa\x89\xbf\x8f\x5c\xfa\xee\x60\xce\x0e\xf6\xcd\xc9\x8a\x7f\x33\x7f\x89\xd8\xdb\x3a\x8e\xef\x13\xe6\x6c\xaf\xe7\xa3\x82\x71\x22\x1f\xab\xf7\x7e\x1b\xf3\x2e\xed\x3e\x0e\x1c\xfe\x1d\xe1\x22\x76\xce\x6f\x02\x07\xe6\xbf\xab\xe1\xdb\xc9\xff\x01\x00\x00\xff\xff\xaa\xb9\x74\x4f\x8b\x12\x00\x00")

func cssIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_cssIndexCss,
		"css/index.css",
	)
}

func cssIndexCss() (*asset, error) {
	bytes, err := cssIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/index.css", size: 4747, mode: os.FileMode(420), modTime: time.Unix(1505956668, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsIndexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\x4d\x6b\xdc\x30\x10\xbd\xeb\x57\xcc\xcd\xf2\xa6\x28\xb9\xb7\x09\x24\x21\x87\x42\x0b\xa5\x7b\x2c\x05\x2b\xf2\xd8\x16\x2b\x4b\x5b\x69\x6c\xb3\x94\xfc\xf7\x8e\x64\xa7\x69\x97\x2d\x3d\x78\x91\x56\xef\xcd\xfb\x98\xeb\xdd\x4e\xc0\x0e\xf6\x48\xd3\x51\xf1\xe9\x5a\x08\x13\x7c\x22\xb0\x84\x63\x82\x5b\x68\x83\x99\x46\xf4\xa4\x7e\x4c\x18\x4f\x7b\x74\x68\x28\xc4\x7b\xe7\x64\xa5\xbe\xe8\x1e\xab\x7a\x23\x38\xeb\x0f\xff\x23\x7c\x46\x3f\x81\x66\x8a\xd8\x74\x1f\x07\x34\x07\xb0\x1d\x34\xe8\x1a\xb0\x09\xc2\x44\xeb\xd7\xc1\x6c\x71\xd9\x2c\x75\x93\x37\x64\x83\x67\xc4\x03\xba\xb0\xec\x4d\x0c\x3c\x10\x5d\x0d\x3f\x05\x40\x64\xf7\xd1\x03\x3a\xd5\x23\x3d\x84\xc9\xb7\xd6\xf7\x8f\xce\xb2\x8b\xaf\xac\x2e\x6b\xf5\x1c\x88\xc2\x08\x77\x70\x23\x5e\x7e\x8b\xdf\xf3\xcc\x59\x13\x96\xac\xd0\xd8\xe6\x5c\x4d\x6f\x80\x8f\xfc\x2e\xed\xaa\x55\x62\xaa\x2e\xc4\x27\x6d\x06\x89\x70\x7b\x07\xa8\x8c\xd3\x29\x7d\xb2\x89\x54\xc4\x31\xcc\x28\xab\x42\xe5\x72\xea\x57\xca\x37\xfb\xfd\x0f\x98\x6e\xdb\x37\xcc\x25\x4b\x34\x20\x98\x10\x23\xdb\x87\x31\xb7\x56\x3c\xb2\x6c\x7e\xc9\x48\x2e\x9d\x38\x5f\x02\xeb\x0b\x38\xb7\x75\x0c\x91\xfe\x95\x41\x6e\xf6\x91\x57\xcb\x5b\xba\x11\x7c\xc9\xe3\xe4\x7b\xbe\x7f\x58\xd7\xad\x1c\xfa\x9e\x06\xfe\xe7\xea\x6a\x85\x43\xde\x8d\xfc\xbb\xf5\x02\xe5\x38\xf5\x2b\x04\xe0\x39\xa2\x3e\x94\xf3\x8b\xc8\x1f\xff\x9c\x75\x77\x29\x63\x2a\xf3\x20\x1d\x4f\x9c\x80\x37\x76\xda\xbc\x2f\xd6\xb7\x61\xc9\x1d\x3d\xcd\x1c\x31\x17\x86\x1e\xa3\xac\x56\x42\xf5\x0e\x4a\xed\x6f\xc9\x6a\xf1\x2b\x00\x00\xff\xff\x00\x4d\x68\x65\xc7\x02\x00\x00")

func jsIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_jsIndexJs,
		"js/index.js",
	)
}

func jsIndexJs() (*asset, error) {
	bytes, err := jsIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/index.js", size: 711, mode: os.FileMode(420), modTime: time.Unix(1507930305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\xc1\x6e\xd4\x30\x10\xbd\xf3\x15\xc6\x5c\x49\xa3\xde\x38\xd8\xbd\x2c\x20\x2e\x88\x4a\xad\x84\x38\x7a\xed\xe9\x66\x8a\xe3\x04\x7b\xb2\xbb\x55\xc9\xbf\xe3\x24\x1b\xc9\x76\x56\xf4\xb4\x33\x7a\x6f\xc6\xef\x3d\xc7\x2b\xde\x7f\xfe\xb1\x7b\xfc\x75\xff\x85\x35\xd4\xda\xbb\x77\x62\xf9\x61\x4c\x34\xa0\xcc\x54\xc4\xb2\x05\x52\x4c\x37\xca\x07\x20\xc9\x07\x7a\xaa\x3e\xf1\x14\x6a\x88\xfa\x0a\xfe\x0c\x78\x94\xfc\x5c\x0d\xaa\xd2\x5d\xdb\x2b\xc2\xbd\x05\xce\x74\xe7\x08\x5c\x9c\x43\x90\x60\x0e\x90\x4d\x3a\xd5\x82\xe4\x47\x84\x53\xdf\x79\x4a\xc8\x27\x34\xd4\x48\x03\x47\xd4\x50\xcd\xcd\x47\x86\x0e\x09\x95\xad\x82\x56\x16\xe4\xed\xba\x88\x90\x2c\xdc\xbd\xbe\xde\x3c\x4e\xc5\x38\xb2\xbf\x2c\x36\x0f\xc3\x9e\x96\x5e\xd4\x0b\x63\x61\x5b\x74\xbf\x99\x07\x2b\x79\xa0\x17\x0b\xa1\x01\x88\xe7\x36\x1e\x9e\x24\xa7\x06\x5a\xa8\x55\x0f\xe7\x5a\x87\x50\xa3\x33\x70\xbe\x89\xd5\x7c\x92\xa8\xd7\x44\xc4\xbe\x33\x2f\x97\x75\x06\x8f\x4c\x5b\x15\x82\xe4\x3f\xbd\xea\x7b\xf0\x17\x59\x39\xb6\x8b\xbe\x14\xba\x04\xcd\xf1\x6f\x71\x75\x06\xe6\xf0\xec\x8c\xe9\x98\x4c\x41\x8a\xb4\xd0\x2b\xb7\xf2\x08\xce\xc4\x93\x28\x44\x3d\xa1\xff\x19\x08\x31\xa5\x75\x26\x4d\xac\x1c\x13\x75\x54\x93\x48\x5f\xda\xab\x56\x76\xcb\x15\x56\xa7\x22\x8e\x92\xf7\x80\x06\xf6\x6a\x63\x27\x61\x7c\x07\x37\x14\x30\x8b\x57\xeb\x95\x3b\x00\xbb\xb9\x57\x07\x08\xe3\x58\xc0\xf9\x06\x24\x68\x37\x1b\x66\x92\xba\x5c\xf9\x87\xc9\xb8\x1d\x0e\xe3\x98\xe7\xa6\xb6\x53\x45\x06\xab\x1c\x70\xa6\x50\xb1\x21\x96\x71\x5d\x0d\xac\xd0\xf9\x86\xcf\x74\xc1\xc4\xe0\x0c\x8d\xe4\x89\x99\xad\xfc\xe6\x36\x73\x18\xdb\x0d\x27\xe2\x17\x35\xdb\x03\xb7\xee\xaf\x7a\x4f\x74\x7d\xed\xba\xf9\x7b\xbd\x32\x2a\x82\xf6\xd8\x13\x0b\x5e\x67\xcf\xee\x79\x7d\x75\xcf\x61\x9a\x5b\x58\x6f\x7f\x88\x59\x29\xea\xe5\x7d\x46\x8b\xf3\x7f\xd9\xbf\x00\x00\x00\xff\xff\xa5\x5c\xdd\x8c\xe3\x04\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 1251, mode: os.FileMode(420), modTime: time.Unix(1507930315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/index.css": cssIndexCss,
	"js/index.js": jsIndexJs,
	"views/index.html": viewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"index.css": &bintree{cssIndexCss, map[string]*bintree{}},
	}},
	"js": &bintree{nil, map[string]*bintree{
		"index.js": &bintree{jsIndexJs, map[string]*bintree{}},
	}},
	"views": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

