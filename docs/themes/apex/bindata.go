// Code generated by go-bindata.
// sources:
// files/css/index.css
// files/js/index.js
// files/views/index.html
// DO NOT EDIT!

package apex

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssIndexCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x58\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x20\x12\x1c\x90\xdc\x59\x82\xe4\xc4\xa9\xab\x00\xc5\xf5\xda\x04\xbd\x87\xee\x16\x9b\x2d\x76\x5f\x29\x89\xb6\xb9\xa1\x44\x81\xa2\xf2\xa7\x8b\x7e\xf7\x1d\x72\x48\x89\xb4\xe5\x14\x45\x51\x58\x1a\xce\xff\xf9\x71\x66\x94\x42\x49\xa9\xc9\xdf\x27\x84\x24\x09\xa3\x3d\x2b\x48\x35\x94\xbc\x4a\x4a\xf6\x8d\x33\x75\x9e\xae\x97\x0b\x92\x2d\x48\x9a\xc3\x6f\x7e\x71\x63\xf9\x9e\x78\xad\x77\x05\x59\x67\x59\xf7\x8c\x94\x1d\xa3\x35\x53\xf0\xc3\xb7\x3b\x5d\x90\x2b\x3c\xb1\x47\x5a\xd1\xea\x81\xb7\xdb\x82\x64\x69\xb6\x52\xac\xb9\x89\xc8\x49\xc3\x6a\x3e\x34\xe6\x74\xe6\x50\x50\xb5\x65\xe6\x6c\x6d\xcf\xec\x61\x4d\xd5\x43\x41\xce\xb2\x2c\x43\xe6\x52\x0c\xc0\x72\x76\x79\xf9\xfe\xed\xdd\x1d\x92\x84\x71\x23\xd9\x2a\xfa\x02\x07\x1b\x6a\xfe\x39\xe1\x72\x6b\x28\x9b\x0d\xf2\x6d\xcc\xdb\xfa\x7a\x7d\xfb\xf6\xda\x13\xbc\xfa\x65\xbe\x5c\x2d\xdf\x3a\xa9\x9e\x09\x56\x69\x2e\x5b\x2b\xff\x48\xd5\x39\x9a\x75\xf9\x98\x8e\x8d\xc2\xa7\x1d\xd7\xec\xe6\xe4\xfb\xc9\xc9\xbf\x6d\x5e\x4b\xf9\x9c\xf4\xfc\x9b\x4d\x41\x29\x95\xc9\x13\x90\x2c\xc3\x4e\x37\x62\x01\xc4\xfa\xc5\x72\x6e\x64\xab\x93\x0d\x6d\xb8\x00\xbf\x13\xda\x75\x82\x25\xfd\x4b\xaf\x59\xb3\x20\xff\x13\xbc\x7d\xf8\x4c\xab\x7b\xfb\x7e\x07\x9c\x0b\x90\x20\xe4\xf4\x9e\x6d\x25\x23\x5f\xff\x7f\xba\x20\xa7\xbf\xc9\x52\x6a\x69\x9e\x7e\x7d\x7e\xd9\xb2\xf6\xd4\xf1\x7c\x2d\x87\x56\x0f\x86\xfe\x81\xb6\x9a\x2a\x26\x84\x79\xb9\xe3\x8a\x92\x7b\xda\xf6\x9e\xef\xa3\x92\xbc\x76\x14\x72\xfa\x89\x89\x47\xa6\x79\x45\xc9\x2f\x6c\x60\x40\xe9\xe1\x00\x82\x55\x1c\xd3\xf7\xc4\xca\x07\x0e\x0e\x1b\xaf\xfb\x06\x60\xb4\xb3\x31\x82\x05\x4e\x05\x07\x2c\xd5\x37\x3e\x28\x88\x1f\x6a\x94\x5f\x23\x5e\x2c\xe9\xc9\x61\xe5\x12\xeb\x58\x42\xc5\xb7\x4a\x0e\x6d\x3d\x26\x78\x6b\xd3\x5b\x49\x21\x95\xa7\xb9\xfa\xd8\x03\x48\x08\x1b\x11\x97\x1b\x4a\x03\x68\xe1\x2d\xc0\xc5\xbc\x74\xb4\xae\x11\x76\x36\xd5\x45\x31\x56\x09\xab\x72\x60\x2f\x2c\xf2\xa1\xe5\xb0\xc6\x17\x58\xbc\x7c\x41\x76\x70\x2b\x76\x97\xf0\xff\xca\x2a\x45\x07\x12\x2d\xbb\x82\xbc\x59\x61\xb0\x8e\x06\x85\xd1\xb2\x71\xbe\x85\x39\x49\x97\x0e\xf6\x51\x56\xae\x31\x2b\x71\x8c\xe3\x0d\x39\x92\x13\xeb\xd4\x81\x23\x87\x16\x51\x0d\x72\xff\x87\x74\x13\xf6\x62\x86\x03\xf3\xd7\x56\x88\x5a\x7e\xe7\x02\x6f\x77\x80\x07\x6d\x98\x35\x7b\xd6\x49\xcd\x2a\xa9\xa8\xc9\x53\x41\x5a\xd9\xe2\x3d\xe8\x02\x9f\x0a\xb2\x84\xc4\x90\xb9\xe8\xae\xe7\x42\xb3\xef\x78\xa1\x31\x42\xc1\x49\xaf\x95\x6c\xb7\x0b\xd0\x8b\x4f\xa1\x43\x87\x38\x89\xf2\xba\xca\x32\xaf\x85\x1a\x05\xf4\x27\x64\xaf\xb2\x10\x58\x63\x45\x2f\xb1\xce\xe3\xd5\x46\x6a\x0e\x41\xd6\xf0\xcc\x6a\x72\x56\xd7\xf5\x68\xb4\xd8\xc9\x47\xa6\xac\x69\x7c\x3c\x74\x60\xec\x2c\x7b\x2a\x83\x7c\x86\xb2\x11\x57\x12\x69\xb2\x2f\x98\xb6\x41\x44\x45\x58\x65\xa6\x08\xf8\x73\xe9\xda\xf8\xde\x8d\x01\x89\x3d\xa1\x1c\x85\xf2\x49\x08\xd9\x20\xae\x48\xb7\xaf\xef\xeb\xb5\x3c\x44\xb7\x43\x25\x6a\x7c\xa5\xb4\x3e\xac\x23\xb5\xed\x14\x3b\x72\xc5\xa7\xb9\x70\x78\xc1\xc7\x9a\x8f\x69\xf0\x79\x71\x09\x56\x14\x06\x55\x0f\xf8\x45\xaa\xc9\xff\x46\xc8\xa7\xe4\xb9\x20\x7d\xa5\xa4\x10\xde\xa1\x02\x9a\xb2\x1c\x54\xc5\xc8\x07\x59\x33\xf2\x45\x99\x8e\xfc\x99\xb5\x42\x2e\x48\x23\x5b\xd9\x77\xb4\x62\x7b\x97\x32\x5d\xcf\xde\x38\x9f\x12\xc8\xc7\x3b\x70\xb7\x66\x06\x38\xf8\x14\xd4\x1e\xd1\xd6\x4b\x01\xcd\xfb\xec\xe3\xed\xed\xf2\xf6\x7a\x4f\x7d\x96\xbe\xf1\x77\x7a\x0a\x0f\x64\xf2\xf9\x10\x1d\xa4\xed\x24\x4b\xac\xbb\x06\x7d\x4f\x8a\x76\xc7\x1a\x55\x34\xba\xc6\xa6\x00\x9e\xd7\x4c\x53\x2e\x7a\x70\xba\x1f\x1a\x40\x08\x4e\xba\x6a\x50\xbd\x49\x7d\x27\x79\xab\x99\xb2\xf9\x1c\xb4\x09\xde\xc3\x9c\x90\x01\x26\x8d\x6b\xbb\x01\xf6\x27\x7d\x5d\x88\x7e\xc1\x36\x1a\x43\xc2\x34\xcc\xd7\xd4\xb1\xe5\x2b\x87\xdd\xf4\x0f\x08\xa9\x73\xf7\xa8\xe6\x7d\x27\xcc\xc6\xb0\x11\xcc\x86\xff\xd7\xd0\x6b\xbe\x79\x01\xb8\x81\x8f\xa6\xac\x15\x43\x67\x8d\xe4\x07\x20\x52\xf0\x17\x65\xdd\x46\x84\x56\xed\x8b\x35\x7b\xa0\xd2\xfc\x26\x35\x57\x38\x4a\x0a\x83\xc0\xa1\x69\x27\x8d\xcc\x64\xf6\xb8\x4f\x86\xed\x93\x5d\xb5\x7e\xd2\x63\x42\x60\x22\x6f\xdb\x04\xea\xd9\xf4\x21\xd9\x43\x0d\x3d\x8f\xd6\x38\xec\x1b\xe9\x3d\xaf\x59\x49\xd1\xa0\xb1\x03\xe9\x83\x7f\x74\xd0\x32\x72\x3b\x4c\xc3\x9b\xd5\xbf\xe2\x33\xde\x6c\x5d\x87\x78\xf6\xcb\x63\x9e\x65\x8e\x09\x6e\xc6\x60\x4f\x3b\xd9\x73\x4c\x8b\x5f\x2d\x20\x9a\xea\xe1\xe5\x26\x3a\x9b\x68\x76\xba\xad\x1c\x82\x8f\x8f\x44\x34\xf0\x8e\xa4\x26\x78\x34\xb4\xd7\xc1\x27\x3c\x44\xac\xef\xdc\x74\x98\x6c\xc3\xe2\x04\xb3\xed\xf1\x18\x3c\xe7\xe7\x05\x2c\xb3\xad\x57\x60\xbd\x24\xcb\x2c\x6b\xfa\x19\xa7\xe7\xfc\x05\x27\x52\x5a\x19\xa3\xaf\x4d\xaa\x39\xb1\xa2\x64\x1b\xa9\xbc\x98\x03\xc4\xe9\x69\x9c\x4d\x5a\xc2\x7d\x19\xb4\x75\x3e\xaa\xcc\x04\x8d\xdc\xb7\x08\x4c\x56\xe2\xf6\x1a\xbc\x4a\x7b\xbb\x5b\x72\x74\x92\x3e\xf2\x9e\x97\x5c\x70\x0d\x70\xdd\xf1\xba\x66\xed\x98\x1b\xf0\xb2\x31\x3d\x94\x0a\xf6\xe7\x79\x76\x11\xd1\x13\xa9\xb8\x1d\x2a\xc6\x5c\x80\xdb\x30\xa9\x54\x08\x58\x2a\x20\xa5\xce\xac\xf9\x8c\x39\x96\x93\x23\x23\xf7\x07\x99\xb4\x52\x61\x3e\xc3\x68\xec\xb3\x60\xf3\xe1\xe4\x4e\xe5\x17\xba\x65\x07\x9b\x59\x9e\xc5\x93\x37\x09\x10\xed\x85\x8a\x0d\x57\xbd\x4e\xaa\x1d\x17\xf5\xfc\x6a\x17\x09\xe3\x04\x4c\x7f\xe7\x5a\xb0\xf9\xa1\x1c\x4d\x98\x65\xba\x74\x13\x06\x45\x52\xcc\x70\x68\x08\xeb\x8c\xf7\x7d\x24\x2a\x14\xf7\x54\xbb\xfa\xd9\x0e\x13\xf6\x96\xe0\xb6\xaf\xb2\x31\x28\xb4\x83\x7a\x42\x3b\x1e\x5f\xeb\x98\xd3\x0c\x8e\x8e\xb6\x71\xbf\x2b\x85\xac\x1e\x42\xa6\xb4\x1f\x4a\xe3\xc4\xf1\x75\x21\x58\x3b\xa2\xb9\xb8\x76\x63\xd1\x86\x10\xd4\x6f\x30\x3d\xb8\x02\x24\x45\x7d\x7c\x1c\x43\xde\xee\x68\x54\x30\xd8\xf5\x94\x1d\x96\x76\xba\xa2\x75\xff\x21\x7b\xf1\x43\x13\x51\xe7\x28\xa5\x98\xff\x76\x9a\x12\xd8\x37\x06\xf6\x93\xfd\x90\xf5\x0a\x51\xb5\x6f\xcf\x37\xa9\x7d\x57\x5b\x38\xa5\xe2\x10\x1b\xfe\x2b\x21\x7d\xdf\x56\x3b\xa9\x5e\xe9\x85\x11\x54\x12\x6f\x5f\x1a\x03\xe6\x86\x64\x69\xbe\x8a\xd2\xc8\x5b\x6b\xc9\x95\x71\xea\x3c\x4e\x70\xec\x3c\x57\x3e\x66\xe7\x41\xff\xb8\xdd\xf3\x22\xec\x5f\x0e\x94\xae\x3f\x85\xd7\x21\x10\xef\xa8\xde\x39\x1d\x76\xf5\x48\xd8\x23\x00\xb6\xb7\x5d\x24\xe0\x0d\x1a\xc5\x18\x46\x8e\xca\xee\xe0\x4b\xd7\x1d\x8d\x8e\x8e\xf0\xfe\xaf\xf9\x73\x06\x35\x0b\x21\x63\x2d\x7c\x0a\xd7\xe4\x3c\xb8\x06\x6b\x73\xb7\x2f\x50\x34\xfe\xf4\x9f\xf9\x23\xca\xa5\xef\x0e\xe6\xec\x60\x29\x9d\xad\xf8\x77\xf3\xe7\x8a\xbd\xd5\xe4\xf8\xd2\x61\xce\xf6\x7a\x3e\x2a\x18\x27\xf2\xb1\x7a\xef\xb7\x31\xef\xd2\xf4\x05\xe1\xf0\xef\x08\x17\xb1\x73\x7e\x5d\x38\x30\xff\x43\x0d\xdf\x4f\xfe\x09\x00\x00\xff\xff\x43\x7c\x24\x05\xb0\x12\x00\x00")

func cssIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_cssIndexCss,
		"css/index.css",
	)
}

func cssIndexCss() (*asset, error) {
	bytes, err := cssIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/index.css", size: 4784, mode: os.FileMode(420), modTime: time.Unix(1508360634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsIndexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\x4d\x6b\xdc\x30\x10\xbd\xeb\x57\xcc\xcd\xf2\xa6\x28\xb9\xb7\x09\x24\x21\x87\x42\x0b\xa5\x7b\x2c\x05\x2b\xf2\xd8\x16\x2b\x4b\x5b\x69\x6c\xb3\x94\xfc\xf7\x8e\x64\xa7\x69\x97\x2d\x3d\x78\x91\x56\xef\xcd\xfb\x98\xeb\xdd\x4e\xc0\x0e\xf6\x48\xd3\x51\xf1\xe9\x5a\x08\x13\x7c\x22\xb0\x84\x63\x82\x5b\x68\x83\x99\x46\xf4\xa4\x7e\x4c\x18\x4f\x7b\x74\x68\x28\xc4\x7b\xe7\x64\xa5\xbe\xe8\x1e\xab\x7a\x23\x38\xeb\x0f\xff\x23\x7c\x46\x3f\x81\x66\x8a\xd8\x74\x1f\x07\x34\x07\xb0\x1d\x34\xe8\x1a\xb0\x09\xc2\x44\xeb\xd7\xc1\x6c\x71\xd9\x2c\x75\x93\x37\x64\x83\x67\xc4\x03\xba\xb0\xec\x4d\x0c\x3c\x10\x5d\x0d\x3f\x05\x40\x64\xf7\xd1\x03\x3a\xd5\x23\x3d\x84\xc9\xb7\xd6\xf7\x8f\xce\xb2\x8b\xaf\xac\x2e\x6b\xf5\x1c\x88\xc2\x08\x77\x70\x23\x5e\x7e\x8b\xdf\xf3\xcc\x59\x13\x96\xac\xd0\xd8\xe6\x5c\x4d\x6f\x80\x8f\xfc\x2e\xed\xaa\x55\x62\xaa\x2e\xc4\x27\x6d\x06\x89\x70\x7b\x07\xa8\x8c\xd3\x29\x7d\xb2\x89\x54\xc4\x31\xcc\x28\xab\x42\xe5\x72\xea\x57\xca\x37\xfb\xfd\x0f\x98\x6e\xdb\x37\xcc\x25\x4b\x34\x20\x98\x10\x23\xdb\x87\x31\xb7\x56\x3c\xb2\x6c\x7e\xc9\x48\x2e\x9d\x38\x5f\x02\xeb\x0b\x38\xb7\x75\x0c\x91\xfe\x95\x41\x6e\xf6\x91\x57\xcb\x5b\xba\x11\x7c\xc9\xe3\xe4\x7b\xbe\x7f\x58\xd7\xad\x1c\xfa\x9e\x06\xfe\xe7\xea\x6a\x85\x43\xde\x8d\xfc\xbb\xf5\x02\xe5\x38\xf5\x2b\x04\xe0\x39\xa2\x3e\x94\xf3\x8b\xc8\x1f\xff\x9c\x75\x77\x29\x63\x2a\xf3\x20\x1d\x4f\x9c\x80\x37\x76\xda\xbc\x2f\xd6\xb7\x61\xc9\x1d\x3d\xcd\x1c\x31\x17\x86\x1e\xa3\xac\x56\x42\xf5\x0e\x4a\xed\x6f\xc9\x6a\xf1\x2b\x00\x00\xff\xff\x00\x4d\x68\x65\xc7\x02\x00\x00")

func jsIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_jsIndexJs,
		"js/index.js",
	)
}

func jsIndexJs() (*asset, error) {
	bytes, err := jsIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/index.js", size: 711, mode: os.FileMode(420), modTime: time.Unix(1507930305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\xc1\x6e\xd4\x30\x10\xbd\xf3\x15\xc6\x5c\x49\xa3\xde\x38\xd8\xbd\x2c\x20\x2e\x88\x4a\xad\x84\x38\x7a\xed\xe9\x66\x8a\xe3\x04\x7b\xb2\xbb\x55\xc9\xbf\xe3\x24\x1b\xc9\x76\x56\xf4\xb4\x33\x7a\x6f\xc6\xef\x3d\xc7\x2b\xde\x7f\xfe\xb1\x7b\xfc\x75\xff\x85\x35\xd4\xda\xbb\x77\x62\xf9\x61\x4c\x34\xa0\xcc\x54\xc4\xb2\x05\x52\x4c\x37\xca\x07\x20\xc9\x07\x7a\xaa\x3e\xf1\x14\x6a\x88\xfa\x0a\xfe\x0c\x78\x94\xfc\x5c\x0d\xaa\xd2\x5d\xdb\x2b\xc2\xbd\x05\xce\x74\xe7\x08\x5c\x9c\x43\x90\x60\x0e\x90\x4d\x3a\xd5\x82\xe4\x47\x84\x53\xdf\x79\x4a\xc8\x27\x34\xd4\x48\x03\x47\xd4\x50\xcd\xcd\x47\x86\x0e\x09\x95\xad\x82\x56\x16\xe4\xed\xba\x88\x90\x2c\xdc\xbd\xbe\xde\x3c\x4e\xc5\x38\xb2\xbf\x2c\x36\x0f\xc3\x9e\x96\x5e\xd4\x0b\x63\x61\x5b\x74\xbf\x99\x07\x2b\x79\xa0\x17\x0b\xa1\x01\x88\xe7\x36\x1e\x9e\x24\xa7\x06\x5a\xa8\x55\x0f\xe7\x5a\x87\x50\xa3\x33\x70\xbe\x89\xd5\x7c\x92\xa8\xd7\x44\xc4\xbe\x33\x2f\x97\x75\x06\x8f\x4c\x5b\x15\x82\xe4\x3f\xbd\xea\x7b\xf0\x17\x59\x39\xb6\x8b\xbe\x14\xba\x04\xcd\xf1\x6f\x71\x75\x06\xe6\xf0\xec\x8c\xe9\x98\x4c\x41\x8a\xb4\xd0\x2b\xb7\xf2\x08\xce\xc4\x93\x28\x44\x3d\xa1\xff\x19\x08\x31\xa5\x75\x26\x4d\xac\x1c\x13\x75\x54\x93\x48\x5f\xda\xab\x56\x76\xcb\x15\x56\xa7\x22\x8e\x92\xf7\x80\x06\xf6\x6a\x63\x27\x61\x7c\x07\x37\x14\x30\x8b\x57\xeb\x95\x3b\x00\xbb\xb9\x57\x07\x08\xe3\x58\xc0\xf9\x06\x24\x68\x37\x1b\x66\x92\xba\x5c\xf9\x87\xc9\xb8\x1d\x0e\xe3\x98\xe7\xa6\xb6\x53\x45\x06\xab\x1c\x70\xa6\x50\xb1\x21\x96\x71\x5d\x0d\xac\xd0\xf9\x86\xcf\x74\xc1\xc4\xe0\x0c\x8d\xe4\x89\x99\xad\xfc\xe6\x36\x73\x18\xdb\x0d\x27\xe2\x17\x35\xdb\x03\xb7\xee\xaf\x7a\x4f\x74\x7d\xed\xba\xf9\x7b\xbd\x32\x2a\x82\xf6\xd8\x13\x0b\x5e\x67\xcf\xee\x79\x7d\x75\xcf\x61\x9a\x5b\x58\x6f\x7f\x88\x59\x29\xea\xe5\x7d\x46\x8b\xf3\x7f\xd9\xbf\x00\x00\x00\xff\xff\xa5\x5c\xdd\x8c\xe3\x04\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 1251, mode: os.FileMode(420), modTime: time.Unix(1507930315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/index.css": cssIndexCss,
	"js/index.js": jsIndexJs,
	"views/index.html": viewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"index.css": &bintree{cssIndexCss, map[string]*bintree{}},
	}},
	"js": &bintree{nil, map[string]*bintree{
		"index.js": &bintree{jsIndexJs, map[string]*bintree{}},
	}},
	"views": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

